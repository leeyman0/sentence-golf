/** @file this file is a script to sort the frequency data in src/loader/static generated by util/analyzebnc.mjs */
import fs from "node:fs/promises";
import path from "node:path";

import loadutils from "../src/common/loadutils.mjs";

const LOADER_STATIC_DIR = path.join("src", "loader", "static");
const BAREWORD_CENSUS_PATH = path.join(LOADER_STATIC_DIR, "barewordcensus.csv");
const LEMMA_CENSUS_PATH = path.join(LOADER_STATIC_DIR, "lemmacensus.csv");

function formatEntry(headers, entry) {
  let line = "";
  for (const col of headers) {
    line +=
      col === "count" ? entry[col].padStart(10) : (entry[col] + ",").padEnd(20);
  }

  return line + "\r\n";
}

/**
 * This code sorts the csv entries
 * @param {{count: number}[]} parsedCsv the csv to sort
 */
function sortCsvByCountHighestFirst(parsedCsv) {
  parsedCsv.sort((a, b) => b.count - a.count);
}

for (let csvpath of [BAREWORD_CENSUS_PATH, LEMMA_CENSUS_PATH]) {
  console.log(`Sorting ${csvpath}`);
  console.group();
  console.log("Reading entries");
  let entries = await loadutils.loadCsv(csvpath);

  console.log("Sorting entries");
  sortCsvByCountHighestFirst(entries);

  console.log("Writing entries");

  let headerKeys = Object.keys(entries[0]);

  let headerString = headerKeys.join(",\t") + "\r\n";

  let file = await fs.open(
    csvpath,
    fs.constants.O_APPEND | fs.constants.O_TRUNC | fs.constants.O_WRONLY
  );

  await file.write(headerString);

  for (let entry of entries) {
    await file.write(formatEntry(headerKeys, entry));
  }

  console.log("Closing file");
  await file.close();

  console.log("Contents successfully written");
  console.groupEnd();
}
